install.packages("rcv")
devtools::install_github("ds-elections/rcv")
install.packages("devtools")
devtools::install_github("ds-elections/rcv")
head(sf_bos_ballot)
help(rcv)
??rcv
head(sf_bos_ballot)
load("~/Documents/github/bigteamscienceconference.github.io/sf_bos_ballot.rda")
head(sf_bos_ballot)
View(sf_bos_ballot)
load("~/Documents/github/bigteamscienceconference.github.io/sf_bos_lookup.rda")
View(sf_bos_lookup)
cleaned <- clean_ballot(ballot = sf_bos_ballot, b_header = T,
lookup = sf_bos_lookup, l_header = T,
format = "WinEDS")
cleaned <- rcv::clean_ballot(ballot = sf_bos_ballot, b_header = T,
lookup = sf_bos_lookup, l_header = T,
format = "WinEDS")
??rcv
cleaned <- clean_ballot(ballot = sf_bos_ballot, b_header = T,
lookup = sf_bos_lookup, l_header = T,
format = "WinEDS")
cleaned <- rcv.clean_ballot(ballot = sf_bos_ballot, b_header = T,
lookup = sf_bos_lookup, l_header = T,
format = "WinEDS")
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(gt)
library(tidyverse)
rawdata <- read.csv("./files/MB_election2022_finalData.csv", sep=",", dec=".", skip=0)
# create df without extra header rows and unused columns
votes <- rawdata[3:nrow(rawdata), c("Q1_1", "Q1_2", "Q1_3", "Q1_4")]
# convert rankings to ints
votes$c1 <- as.numeric(votes$Q1_1)
votes$c2 <- as.numeric(votes$Q1_2)
votes$c3 <- as.numeric(votes$Q1_3)
votes$c4 <- as.numeric(votes$Q1_4)
# only keep numeric variables
votes <- votes[ , 5:8]
# remove empty row(s)
votes <- votes[-which(is.na(votes$c1)),]
#initialize variables
ncands <- 4
candidates <-  names(votes)
nwinners <- 0
nelim <- 0
elims <- vector(mode = "integer", length = 2)
totalVotes <- nrow(votes)
votesToWin <- ceiling(totalVotes/3) # candidates receiving 1/3 (or more) of votes win
results <- data.frame(candidates)
r1 <- vector(mode = "numeric", length = 4)
# tally first ranked votes for each candidate
r1[1] <- sum(votes$c1 == 1)
r1[2] <- sum(votes$c2 == 1)
r1[3] <- sum(votes$c3 == 1)
r1[4] <- sum(votes$c4 == 1)
# check for winners
r1winners <- r1 > votesToWin
winners <- which(r1winners)
nwinners <- nwinners + length(winners)
for (i in 1:nwinners) {
win1idx <- i
win1name <- candidates[i]
phrase <- paste(win1name,"is a winner!")
print(phrase)
}
r2trans <- vector(mode = "numeric", length = 3)
r2 <- vector(mode = "numeric", length = 3)
r2winners <- 0
# create df with 2nd, 3rd, 4th choices for votes for winner
r1winnerVotes <- votes[votes[,win1idx] == 1, -win1idx]
# calculate the percentage of winner1's votes to be transferred to next candidate
win1votes <- r1[win1idx]
win1extraVotes <- win1votes - votesToWin
win1transferPCT <- win1extraVotes/r1[win1idx]
# multiply winner's votes by transfer % and add to 2nd choice totals
for (i in 1:length(names(r1winnerVotes))) {
r2trans[i] <- (length(r1winnerVotes[i][r1winnerVotes[i]==2])) * win1transferPCT
}
# transfer votes from r1 to r2 for remaining candidates
r2 <- r1[-win1idx]
candidates <- candidates[-win1idx]
# add transfer votes to r1 votes for remaining candidates
r2 <- r2 + r2trans
# check to see if any candidates are now over threshold to win
r2winners <- r2 > votesToWin
nr2winners <- sum(r2winners)
winners <- which(r2winners)
nwinners <- nwinners + length(winners)
if (nr2winners > 0) {
win2idx <- winners
phrase <- paste(candidates[i],"is a winner!")
} else {
# if no winner, eliminate lowest vote-getter
print("No winner in round 2.")
nelim <- nelim + 1
elim2idx <- which.min(r2)
elims[nelim] <- elim2idx
elim2name <- candidates[elim2idx]
phrase <- paste(candidates[elim2idx], "is eliminated.")
print(phrase)
candidates <- candidates[-elim2idx]
}
r3trans <- vector(mode = "numeric", length = 2)
r3 <- vector(mode = "numeric", length = 2)
r3winners <- 0
# redistribute winner1's votes to non-eliminated candidates
r1winnerVotes_2 <- r1winnerVotes[r1winnerVotes[,elim2idx] == 2, ]
r1winnerVotes_2 <- r1winnerVotes_2[-elim2idx]
for (i in 1:length(candidates)) {
r3trans[i] <- (length(r1winnerVotes_2[i][r1winnerVotes_2[i]==3])) * win1transferPCT
}
# transfer votes from r2 to r3 for remaining candidates
r3 <- r2[-elim2idx]
# add transfer votes to r2 votes for remaining candidates
r3 <- r3 + r3trans
# redistribute eliminated candidate's votes to other candidates
r2elimVotes <- votes[votes[,elim2name] == 1, -win1idx] #first remove winner's votes
r2elimVotes <- r2elimVotes[, -elim2idx] #then remove elim's votes
# find next choice remaining candidate
r2elimVotes$min <- do.call(pmin, r2elimVotes)
r3trans[1] <- sum(r2elimVotes$c2==r2elimVotes$min)
r3trans[2] <- sum(r2elimVotes$c3==r2elimVotes$min)
# add transferred votes to r3 total
r3 <- r3 + r3trans
# check for winner in round 3
r3winners <- r3 > votesToWin
nr3winners <- sum(r3winners)
winners <- which(r3winners)
# there is a winner, so print the name
phrase <- paste(candidates[winners],"is a winner!")
print(phrase)
# inelegant building of table with results by round
results$round1 <- r1
results$round2 <- 0
results$round2[1] <- votesToWin
results$round2[2:4] <- r2
results$round3 <- 0
results$round3[1] <- votesToWin
results$round3[2:3] <- r3
cnames <- c("E.-S. Ko", "J. Kominsky", "B. McMillan", "F. Margoni")
results$candidates <- cnames
results %>%
gt() %>%
fmt_number(
columns = c(round2, round3),
rows = 2:4,
decimals = 1
) %>%
tab_header(
title = "ManyBabies Election 2022",
subtitle = "Governing Board - 2 seats"
) %>%
tab_style(
style = cell_fill(color = "green"),
locations = cells_body(
columns = c(round1, round2, round3),
rows = 1
)
) %>%
tab_style(
style = cell_fill(color = "red"),
locations = cells_body(
columns = c(round2, round3),
rows = 4
)
) %>%
tab_style(
style = cell_fill(color = "green"),
locations = cells_body(
columns = round3,
rows = 3
)
)
